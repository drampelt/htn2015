<nav class="navbar navbar-default" role="navigation">
  <div class="navbar-header">
    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
    </button>    
  </div>
  <a class="navbar-brand" href="#"><%= image_tag("logo_small.png", class: "header_logo") %></a>
</nav>

<div class="container-fluid">

    <div class="row">
        <div id="camera" class="col-md-6">
          <div>
            <h2>Camera</h2>
            <div id="videos-container">
              <div id="step1">
                <p>Please click `allow` on the top of the screen so we can access your webcam and microphone for calls.</p>
                <div id="step1-error">
                  <p>Failed to access the webcam and microphone. Make sure to run this demo on an http server and click allow when asked for permission by the browser.</p>
                  <a href="#" class="pure-button pure-button-error" id="step1-retry">Try again</a>
                </div>
              </div>

              <!-- Make calls to others -->
              <% unless current_user %>
              <div id="step2">
                <button id="make-call" disabled>Start Video Call</button>
              </div>
              <% end %>

              <!-- Call in progress -->
              <div id="step3">
                <p>Call in Progress</p>
                <p><button id="end-call">End Call</button></p>
              </div>

              <video id="their-video" autoplay>Video stream not available.</video>
              <!--<button id="startbutton">Take photo</button> -->
              <video id="my-video" muted="true" autoplay>Video stream not available.</video>

              <canvas id="canvas">
              </canvas>
              <div class="output">
                <img id="photo">
              </div>
            </div> <!--end videos-->
          </div>

          <hr>

          <div>
            <h2>Info</h2>
            <h4>Interview progress:</h4>
            <div class="progress">
              <div id="interview-progress" class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: 40%">
                <span class="sr-only">40% Complete (success)</span>
              </div>
            </div>

            <h4>Current question: </h4>
            <h4 id="current_question">Implement a Linked-List in the language of your choice.</h4>

            <% unless current_user %>
            <h4>Current question: </h4>
            <h4 id="current_question">Implement a Linked-List in the language of your choice.</h4>
            <% else %>
            <button type="button" class="btn btn-primary btn-info" data-toggle="modal" data-target="#question_modal">Add question</button>
            <button type="button" class="btn btn-primary btn-warning" data-toggle="modal" data-target="#note_modal">Add note</button>
            <button type="button" class="btn btn-primary btn-danger">Conclude interview</button>
            
            <h2>All Questions <small>click to ask</small></h2>
            <ul id="questions">
              <% @interview.questions.each do |question| %>
                <li class="question" data-id="<%= question.id %>"><%= question.content %></li>
              <% end %>
            </ul>
            <% end %>
          </div>
        </div>

        <div class="col-md-6">
          <!--<div>-->
            <ul class="nav nav-pills" id="myNav">
              <li class="active"><a href="#text-editor">Text Editor</a></li>
              <li><a href="#report">Report</a></li>
              <li><a href="#resume">Resume</a></li>
            </ul>
          <!--</div>-->

            <div id='content' class="tab-content">
              <div class="tab-pane active" id="text-editor">
                <h3 style="text-align: center">Text editor</h3>
                <!-- Single button -->
                <div class="dropdown">
                  <button class="btn btn-default dropdown-toggle" type="button" id="dropdownMenu1" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                    <span id="current_language">javascript</span ><span class="caret"></span>
                  </button>

                  <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                    <li><a href="#" onClick="setAceMode('java')">java</a></li>
                    <li><a href="#" onClick="setAceMode('c')">c/c++</a></li>
                    <li><a href="#" onClick="setAceMode('python')">python</a></li>
                    <li><a href="#" onClick="setAceMode('ruby')">ruby</a></li>
                    <li><a href="#" onClick="setAceMode('javascript')">javascript</a></li>
                  </ul>
                </div>
                <div id="firepad-container"></div>
              </div><!--end "text-editor" -->

              <div class="tab-pane" id="report">
                <h3 style="text-align: center">Report</h3>
                <p>Questions answered correctly: (7/8)</p>
                <p>Overall sentiment:</p>
                <p>Keywords:</p>
                <p>Emotions:</p>
                <div class="progress">
                  <div id="progress-Happy" class="progress-bar" role="progressbar" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 50%;">
                    Happy
                  </div>
                </div>
                <div class="progress">
                  <div id="progress-Surprise" class="progress-bar" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width: 50%;">
                    Surprise
                  </div>
                </div>
                <div class="progress">
                  <div id="progress-Neutral" class="progress-bar" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width: 50%;">
                    Neutral
                  </div>
                </div>
                <div class="progress">
                  <div id="progress-Sad" class="progress-bar" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width: 50%;">
                    Sad
                  </div>
                </div>
                <div class="progress">
                  <div id="progress-Fear" class="progress-bar" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width: 50%;">
                    Fear
                  </div>
                </div>
                <div class="progress">
                  <div id="progress-Angry" class="progress-bar" role="progressbar" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100" style="width: 50%;">
                    Angry
                  </div>
                </div>
                <p>Notes:</p>
                <ul id="report_notes">
                  
                </ul>

              </div><!--end "info" -->
            </div><!--end "tab-content" -->
        </div><!--end "col-6" -->

    </div><!--end "row" -->
</div>

<!-- New note dialog -->
<div class="modal fade" id="note_modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="myModalLabel">New note</h4>
      </div>
      <div class="modal-body">
        <input id="new_note_text" type="text" class="form-control" placeholder="Type note here.">
      </div>
      <div class="modal-footer">
        <!--<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>-->
        <button id="submit_note" type="button" class="btn btn-primary" data-dismiss="modal">Save note</button>
      </div>
    </div>
  </div>
</div>

<!-- Question dialog -->
<div class="modal fade" id="question_modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <input id="new_question_text" type="text" class="form-control" placeholder="Type question here.">
      </div>
      <div class="modal-body">
        <input id="new_question_answer" type="text" class="form-control" placeholder="Type expected answer here.">
        <hr>
        Select from pre-made questions:
        <div class="radio">
          <label><input type="radio" name="optradio">Option 1</label>
        </div>
        <div class="radio">
          <label><input type="radio" name="optradio">Option 2</label>
        </div>
      </div>
      <div class="modal-footer">
        <!--<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>-->
        <button id="submit_question" type="button" class="btn btn-primary" data-dismiss="modal">Submit question</button>
      </div>
    </div>
  </div>
</div><!-- Question dialog -->

<script>
  var questions = <%= raw @interview.questions.to_json %>;
  function init() {
    var id = location.pathname.substr(12);
    //// Initialize Firebase.
    var firepadRef = new Firebase('https://htn2015.firebaseio.com/' + id);
    //// Create ACE
    var editor = ace.edit("firepad-container");
    editor.setTheme("ace/theme/textmate");
    window.editor = editor;
    var session = editor.getSession();
    session.setUseWrapMode(true);
    session.setUseWorker(false);
    session.setMode("ace/mode/javascript");

    //// Create Firepad.
    var firepad = Firepad.fromACE(firepadRef, editor, {
      defaultText: '// JavaScript Editing with Firepad!\nfunction go() {\n  var message = "Hello, world.";\n  console.log(message);\n}'
    });

    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

    <% if current_user %>
    //// Interviewer

    var peer = new Peer(id, {key: 'be4ed344-8803-4f32-adcd-310ed09a3a5b'});

    peer.on('connection', function(conn) {
      // TODO: check if someone is already connected
      window.conn = conn;
      conn.on('data', function(data) {
        console.log('got ' + data);
        if(data.response) {
          console.log('id:' + data.response.id, 'content:' + data.response.content);
          $.post('/responses', {question_id: data.response.id, context: data.response.content});
          var question = _.findWhere(questions, {id: data.response.id});
          question.response = data.response.content;
          var index = questions.indexOf(question);
          $('.question').eq(index).html(question.content + ' - ' + question.response);
        }
      });
    });
    // Receiving a call
    peer.on('call', function(call){
      // Answer the call automatically (instead of prompting user) for demo purposes
      call.answer(window.localStream);
      step3(call);
    });

    peer.on('error', function(err){
      alert(err.message);
      // Return to step 2 if error occurs
      step2();
    });

    <% else %>
    //// Interviewee

    var peer = new Peer({key: 'be4ed344-8803-4f32-adcd-310ed09a3a5b'});
    peer.on('open', function(){
      $('#make-call').removeAttr('disabled');

      var conn = peer.connect(id);
      window.conn = conn;
      conn.on('data', function(data) {
        console.log("received: " + data);
        window.data = data;
        if(data.progress) { setProgressBar(data.progress); }
        if(data.question) {
          if(window.question) { conn.send({response: {id: window.question.id, content: stopRecognition()}}); }
          setQuestion(data.question);
          startRecognition();
        }
      });
    });

    $('#make-call').click(function(){
      // Initiate a call!
      var call = peer.call(id, window.localStream);
      step3(call);
    });

    <% end %>

    $('#end-call').click(function(){
      window.existingCall.close();
      step2();
    });
    // Retry if getUserMedia fails
    $('#step1-retry').click(function(){
      $('#step1-error').hide();
      step1();
    });

    var width = 320;    // We will scale the photo width to this
    var height;

    step1();

    function step1 () {
      // Get audio/video stream
      navigator.getUserMedia({audio: true, video: true}, function(stream){
        // Set your video displays
        $('#my-video').prop('src', URL.createObjectURL(stream));
        // height = $('#my-video').videoHeight / ($('#my-video').videoWidth/width);
        window.localStream = stream;
        step2();
      }, function(){ $('#step1-error').show(); });
    }

    function step2 () {
      $('#step1, #step3').hide();
      $('#step2').show();
    }

    function step3 (call) {
      // Hang up on an existing call if present
      if (window.existingCall) {
        window.existingCall.close();
      }
      // Wait for stream on the call, then set peer video display
      call.on('stream', function(stream){
        $('#their-video').prop('src', URL.createObjectURL(stream));
      });
      call.on('close', function() {
        if(window.picturetask) { clearInterval(window.picturetask); }
      });
      // UI stuff
      window.existingCall = call;
      $('#their-id').text(call.peer);
      call.on('close', step2);
      $('#step1, #step2').hide();
      $('#step3').show();
    }

    <% if current_user %>
    
    var video = $('#their-video')[0];
    var canvas = $('#canvas')[0];
    var photo = $('#photo')[0];
    var streaming;
    $(video).on('canplay', function(ev){
      if (!streaming) {
        height = video.videoHeight / (video.videoWidth/width);
        canvas.setAttribute('width', width);
        canvas.setAttribute('height', height);
        streaming = true;
        window.picturetask = setInterval(takepicture, 2000);
      }
    });

    function takepicture() {
      var context = canvas.getContext('2d');
      context.drawImage(video, 0, 0, width, height);
      $(canvas).faceDetection({complete: function(faces) {
        var data;
        var detect = false;
        if(faces.length > 0) {
          face = faces[0];
          console.log(face);
          var tmpCanvas = document.createElement('canvas'),
              tmpContext = tmpCanvas.getContext('2d');
              
          tmpCanvas.width = Math.round(face.width);
          tmpCanvas.height = Math.round(face.height);
          tmpContext.drawImage(canvas, -face.x, -face.y);
          data = tmpCanvas.toDataURL('image/png');
          photo.setAttribute('src', data);
        } else {
          data = canvas.toDataURL('image/png');
          detect = true;
        }
        photo.setAttribute('src', data);
        $.post('/image.json', {image: data.substr(22), detect: detect}).done(function(stats){
          if(detect) { stats = stats[0].emotions; }
          console.log(window.stats = stats);
          for(key in stats) {
            $('#progress-' + key).css('width', (stats[key] * 100) + '%');
          }
        });
      }});

    };
    
    <% end %>

  }

  function setProgressBar(value){
    if(value > 100){
      return;
    }
    $('#interview-progress').attr('aria-valuenow', value).css('width', value + '%');
  }

  function setAceMode(language){
          var editor = ace.edit("firepad-container");
          var session = editor.getSession();
          document.getElementById("current_language").innerHTML = language;
          session.setMode("ace/mode/" + language);
      }

  function setQuestion(question){
    window.question = question;
    document.getElementById("current_question").innerHTML = question.content;
  }
  
  $('.question').click(function(e) {
    selectQuestion($(e.currentTarget).index());
  });
  
  function selectQuestion(index) {
    $('.question').removeClass('selected');
    $('.question').eq(index).addClass('selected');
    conn.send({question: questions[index]});
  }
  
  $("#submit_question").click(function(){
    $.post("/questions.json",
    {
      content:$("#new_question_text").val(),
      answer:$("#new_question_answer").val(),
      link: location.pathname.substr(12)
    },
    function(question){
      questions.push(question);
      $('#questions').append($('<li/>').addClass('question').attr('data-id', question.id).html(question.content));
      $("#current_question").html(question.content);
      $("#new_question_text").val("");
      $("#new_question_answer").val("");
    });
  });
  
  $("#submit_note").click(function(){
    $("#report_notes").append("<li>" + $("#new_note_text").val() + "</li>");
    $("#new_note_text").val("");
  });

  var final_transcript = '';
  var recognizing = false;
  var ignore_onend;
  var start_timestamp;
  var current_style;
  var two_line = /\n\n/g;
  var one_line = /\n/g;

  $(document).ready(function(){
    init();

    // navbar change two-column view
    $('#myNav a').click(function (e) {
      e.preventDefault()
      $(this).tab('show')
    })

  var transcript = '';

  function startRecognition() {
    console.log('starting recognition');
    transcript = '';
    var recognition = new webkitSpeechRecognition();
    window.recognition = recognition;
    recognition.continuous = true;
    recognition.onresult = function(event) {
      for(var i = event.resultIndex; i < event.results.length; i++) {
        transcript += event.results[i][0].transcript;
      }
      console.log('result: ' + transcript);
    }
    recognition.onend = function() {
      console.log('done recognition: ' + transcript);
    }
    recognition.start();
  }

  function stopRecognition() {
    console.log('ending recognition');
    recognition.stop();
    return transcript;
  }
});

</script>
